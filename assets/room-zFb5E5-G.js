import{l as w,U as L,n as T,o as ve,p as _e,q as Re,r as Ae,s as I,t as p,S as W,C as G,B as N,u as Pe,v as Se,L as K,w as V,D as F,x as H,F as De,h as te,y as xe,N as Te,z as k,H as ae,P as se,V as Be,I as Ce,J as Ie,K as Ne,O as oe,X as ye,Y as Ee,Z as le,_ as ze,$ as Fe,a0 as Le,a1 as He,a2 as Ue,a3 as Ge,a4 as ke,W as Oe,A as Ve,R as he,E as ue,M as We,T as Ke,a as Xe,b as Z,G as je,c as ce,a5 as Ze,a6 as Ye,d as qe,e as z}from"./tween.esm-BwdqjlK4.js";/**
 * postprocessing v6.37.0 build Sun Mar 02 2025
 * https://github.com/pmndrs/postprocessing
 * Copyright 2015-2025 Raoul van RÃ¼schen
 * @license Zlib
 */var Y=1/1e3,$e=1e3,Qe=class{constructor(){this.startTime=performance.now(),this.previousTime=0,this.currentTime=0,this._delta=0,this._elapsed=0,this._fixedDelta=1e3/60,this.timescale=1,this.useFixedDelta=!1,this._autoReset=!1}get autoReset(){return this._autoReset}set autoReset(e){typeof document<"u"&&document.hidden!==void 0&&(e?document.addEventListener("visibilitychange",this):document.removeEventListener("visibilitychange",this),this._autoReset=e)}get delta(){return this._delta*Y}get fixedDelta(){return this._fixedDelta*Y}set fixedDelta(e){this._fixedDelta=e*$e}get elapsed(){return this._elapsed*Y}update(e){this.useFixedDelta?this._delta=this.fixedDelta:(this.previousTime=this.currentTime,this.currentTime=(e!==void 0?e:performance.now())-this.startTime,this._delta=this.currentTime-this.previousTime),this._delta*=this.timescale,this._elapsed+=this._delta}reset(){this._delta=0,this._elapsed=0,this.currentTime=performance.now()-this.startTime}getDelta(){return this.delta}getElapsed(){return this.elapsed}handleEvent(e){document.hidden||(this.currentTime=performance.now()-this.startTime)}dispose(){this.autoReset=!1}},Je=(()=>{const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]),s=new Ne;return s.setAttribute("position",new oe(e,3)),s.setAttribute("uv",new oe(t,2)),s})(),R=class ee{static get fullscreenGeometry(){return Je}constructor(t="Pass",s=new W,i=new Pe){this.name=t,this.renderer=null,this.scene=s,this.camera=i,this.screen=null,this.rtt=!0,this.needsSwap=!0,this.needsDepthTexture=!1,this.enabled=!0}get renderToScreen(){return!this.rtt}set renderToScreen(t){if(this.rtt===t){const s=this.fullscreenMaterial;s!==null&&(s.needsUpdate=!0),this.rtt=!t}}set mainScene(t){}set mainCamera(t){}setRenderer(t){this.renderer=t}isEnabled(){return this.enabled}setEnabled(t){this.enabled=t}get fullscreenMaterial(){return this.screen!==null?this.screen.material:null}set fullscreenMaterial(t){let s=this.screen;s!==null?s.material=t:(s=new Se(ee.fullscreenGeometry,t),s.frustumCulled=!1,this.scene===null&&(this.scene=new W),this.scene.add(s),this.screen=s)}getFullscreenMaterial(){return this.fullscreenMaterial}setFullscreenMaterial(t){this.fullscreenMaterial=t}getDepthTexture(){return null}setDepthTexture(t,s=N){}render(t,s,i,r,a){throw new Error("Render method not implemented!")}setSize(t,s){}initialize(t,s,i){}dispose(){for(const t of Object.keys(this)){const s=this[t];(s instanceof I||s instanceof ye||s instanceof Ee||s instanceof ee)&&this[t].dispose()}this.fullscreenMaterial!==null&&this.fullscreenMaterial.dispose()}},et=class extends R{constructor(){super("ClearMaskPass",null,null),this.needsSwap=!1}render(e,t,s,i,r){const a=e.state.buffers.stencil;a.setLocked(!1),a.setTest(!1)}},tt=`#include <common>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
uniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;
#include <colorspace_fragment>
#include <dithering_fragment>
}`,ie="varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",Me=class extends H{constructor(){super({name:"CopyMaterial",uniforms:{inputBuffer:new p(null),opacity:new p(1)},blending:k,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:tt,vertexShader:ie})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}getOpacity(e){return this.uniforms.opacity.value}setOpacity(e){this.uniforms.opacity.value=e}},st=class extends R{constructor(e,t=!0){super("CopyPass"),this.fullscreenMaterial=new Me,this.needsSwap=!1,this.renderTarget=e,e===void 0&&(this.renderTarget=new I(1,1,{minFilter:K,magFilter:K,stencilBuffer:!1,depthBuffer:!1}),this.renderTarget.texture.name="CopyPass.Target"),this.autoResize=t}get resize(){return this.autoResize}set resize(e){this.autoResize=e}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}setAutoResizeEnabled(e){this.autoResize=e}render(e,t,s,i,r){this.fullscreenMaterial.inputBuffer=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){this.autoResize&&this.renderTarget.setSize(e,t)}initialize(e,t,s){s!==void 0&&(this.renderTarget.texture.type=s,s!==L?this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1":e!==null&&e.outputColorSpace===T&&(this.renderTarget.texture.colorSpace=T))}},de=new G,re=class extends R{constructor(e=!0,t=!0,s=!1){super("ClearPass",null,null),this.needsSwap=!1,this.color=e,this.depth=t,this.stencil=s,this.overrideClearColor=null,this.overrideClearAlpha=-1}setClearFlags(e,t,s){this.color=e,this.depth=t,this.stencil=s}getOverrideClearColor(){return this.overrideClearColor}setOverrideClearColor(e){this.overrideClearColor=e}getOverrideClearAlpha(){return this.overrideClearAlpha}setOverrideClearAlpha(e){this.overrideClearAlpha=e}render(e,t,s,i,r){const a=this.overrideClearColor,n=this.overrideClearAlpha,o=e.getClearAlpha(),h=a!==null,f=n>=0;h?(e.getClearColor(de),e.setClearColor(a,f?n:o)):f&&e.setClearAlpha(n),e.setRenderTarget(this.renderToScreen?null:t),e.clear(this.color,this.depth,this.stencil),h?e.setClearColor(de,o):f&&e.setClearAlpha(o)}},it=class extends R{constructor(e,t){super("MaskPass",e,t),this.needsSwap=!1,this.clearPass=new re(!1,!1,!0),this.inverse=!1}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get inverted(){return this.inverse}set inverted(e){this.inverse=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getClearPass(){return this.clearPass}isInverted(){return this.inverted}setInverted(e){this.inverted=e}render(e,t,s,i,r){const a=e.getContext(),n=e.state.buffers,o=this.scene,h=this.camera,f=this.clearPass,E=this.inverted?0:1,m=1-E;n.color.setMask(!1),n.depth.setMask(!1),n.color.setLocked(!0),n.depth.setLocked(!0),n.stencil.setTest(!0),n.stencil.setOp(a.REPLACE,a.REPLACE,a.REPLACE),n.stencil.setFunc(a.ALWAYS,E,4294967295),n.stencil.setClear(m),n.stencil.setLocked(!0),this.clearPass.enabled&&(this.renderToScreen?f.render(e,null):(f.render(e,t),f.render(e,s))),this.renderToScreen?(e.setRenderTarget(null),e.render(o,h)):(e.setRenderTarget(t),e.render(o,h),e.setRenderTarget(s),e.render(o,h)),n.color.setLocked(!1),n.depth.setLocked(!1),n.stencil.setLocked(!1),n.stencil.setFunc(a.EQUAL,1,4294967295),n.stencil.setOp(a.KEEP,a.KEEP,a.KEEP),n.stencil.setLocked(!0)}},rt=class{constructor(e=null,{depthBuffer:t=!0,stencilBuffer:s=!1,multisampling:i=0,frameBufferType:r}={}){this.renderer=null,this.inputBuffer=this.createBuffer(t,s,r,i),this.outputBuffer=this.inputBuffer.clone(),this.copyPass=new st,this.depthTexture=null,this.passes=[],this.timer=new Qe,this.autoRenderToScreen=!0,this.setRenderer(e)}get multisampling(){return this.inputBuffer.samples||0}set multisampling(e){const t=this.inputBuffer,s=this.multisampling;s>0&&e>0?(this.inputBuffer.samples=e,this.outputBuffer.samples=e,this.inputBuffer.dispose(),this.outputBuffer.dispose()):s!==e&&(this.inputBuffer.dispose(),this.outputBuffer.dispose(),this.inputBuffer=this.createBuffer(t.depthBuffer,t.stencilBuffer,t.texture.type,e),this.inputBuffer.depthTexture=this.depthTexture,this.outputBuffer=this.inputBuffer.clone())}getTimer(){return this.timer}getRenderer(){return this.renderer}setRenderer(e){if(this.renderer=e,e!==null){const t=e.getSize(new w),s=e.getContext().getContextAttributes().alpha,i=this.inputBuffer.texture.type;i===L&&e.outputColorSpace===T&&(this.inputBuffer.texture.colorSpace=T,this.outputBuffer.texture.colorSpace=T,this.inputBuffer.dispose(),this.outputBuffer.dispose()),e.autoClear=!1,this.setSize(t.width,t.height);for(const r of this.passes)r.initialize(e,s,i)}}replaceRenderer(e,t=!0){const s=this.renderer,i=s.domElement.parentNode;return this.setRenderer(e),t&&i!==null&&(i.removeChild(s.domElement),i.appendChild(e.domElement)),s}createDepthTexture(){const e=this.depthTexture=new ve;return this.inputBuffer.depthTexture=e,this.inputBuffer.dispose(),this.inputBuffer.stencilBuffer?(e.format=_e,e.type=Re):e.type=Ae,e}deleteDepthTexture(){if(this.depthTexture!==null){this.depthTexture.dispose(),this.depthTexture=null,this.inputBuffer.depthTexture=null,this.inputBuffer.dispose();for(const e of this.passes)e.setDepthTexture(null)}}createBuffer(e,t,s,i){const r=this.renderer,a=r===null?new w:r.getDrawingBufferSize(new w),n={minFilter:K,magFilter:K,stencilBuffer:t,depthBuffer:e,type:s},o=new I(a.width,a.height,n);return i>0&&(o.ignoreDepthForMultisampleCopy=!1,o.samples=i),s===L&&r!==null&&r.outputColorSpace===T&&(o.texture.colorSpace=T),o.texture.name="EffectComposer.Buffer",o.texture.generateMipmaps=!1,o}setMainScene(e){for(const t of this.passes)t.mainScene=e}setMainCamera(e){for(const t of this.passes)t.mainCamera=e}addPass(e,t){const s=this.passes,i=this.renderer,r=i.getDrawingBufferSize(new w),a=i.getContext().getContextAttributes().alpha,n=this.inputBuffer.texture.type;if(e.setRenderer(i),e.setSize(r.width,r.height),e.initialize(i,a,n),this.autoRenderToScreen&&(s.length>0&&(s[s.length-1].renderToScreen=!1),e.renderToScreen&&(this.autoRenderToScreen=!1)),t!==void 0?s.splice(t,0,e):s.push(e),this.autoRenderToScreen&&(s[s.length-1].renderToScreen=!0),e.needsDepthTexture||this.depthTexture!==null)if(this.depthTexture===null){const o=this.createDepthTexture();for(e of s)e.setDepthTexture(o)}else e.setDepthTexture(this.depthTexture)}removePass(e){const t=this.passes,s=t.indexOf(e);if(s!==-1&&t.splice(s,1).length>0){if(this.depthTexture!==null){const a=(o,h)=>o||h.needsDepthTexture;t.reduce(a,!1)||(e.getDepthTexture()===this.depthTexture&&e.setDepthTexture(null),this.deleteDepthTexture())}this.autoRenderToScreen&&s===t.length&&(e.renderToScreen=!1,t.length>0&&(t[t.length-1].renderToScreen=!0))}}removeAllPasses(){const e=this.passes;this.deleteDepthTexture(),e.length>0&&(this.autoRenderToScreen&&(e[e.length-1].renderToScreen=!1),this.passes=[])}render(e){const t=this.renderer,s=this.copyPass;let i=this.inputBuffer,r=this.outputBuffer,a=!1,n,o,h;e===void 0&&(this.timer.update(),e=this.timer.getDelta());for(const f of this.passes)f.enabled&&(f.render(t,i,r,e,a),f.needsSwap&&(a&&(s.renderToScreen=f.renderToScreen,n=t.getContext(),o=t.state.buffers.stencil,o.setFunc(n.NOTEQUAL,1,4294967295),s.render(t,i,r,e,a),o.setFunc(n.EQUAL,1,4294967295)),h=i,i=r,r=h),f instanceof it?a=!0:f instanceof et&&(a=!1))}setSize(e,t,s){const i=this.renderer,r=i.getSize(new w);(e===void 0||t===void 0)&&(e=r.width,t=r.height),(r.width!==e||r.height!==t)&&i.setSize(e,t,s);const a=i.getDrawingBufferSize(new w);this.inputBuffer.setSize(a.width,a.height),this.outputBuffer.setSize(a.width,a.height);for(const n of this.passes)n.setSize(a.width,a.height)}reset(){this.dispose(),this.autoRenderToScreen=!0}dispose(){for(const e of this.passes)e.dispose();this.passes=[],this.inputBuffer!==null&&this.inputBuffer.dispose(),this.outputBuffer!==null&&this.outputBuffer.dispose(),this.deleteDepthTexture(),this.copyPass.dispose(),this.timer.dispose(),R.fullscreenGeometry.dispose()}},D={NONE:0,DEPTH:1,CONVOLUTION:2},c={FRAGMENT_HEAD:"FRAGMENT_HEAD",FRAGMENT_MAIN_UV:"FRAGMENT_MAIN_UV",FRAGMENT_MAIN_IMAGE:"FRAGMENT_MAIN_IMAGE",VERTEX_HEAD:"VERTEX_HEAD",VERTEX_MAIN_SUPPORT:"VERTEX_MAIN_SUPPORT"},nt=class{constructor(){this.shaderParts=new Map([[c.FRAGMENT_HEAD,null],[c.FRAGMENT_MAIN_UV,null],[c.FRAGMENT_MAIN_IMAGE,null],[c.VERTEX_HEAD,null],[c.VERTEX_MAIN_SUPPORT,null]]),this.defines=new Map,this.uniforms=new Map,this.blendModes=new Map,this.extensions=new Set,this.attributes=D.NONE,this.varyings=new Set,this.uvTransformation=!1,this.readDepth=!1,this.colorSpace=xe}},q=!1,fe=class{constructor(e=null){this.originalMaterials=new Map,this.material=null,this.materials=null,this.materialsBackSide=null,this.materialsDoubleSide=null,this.materialsFlatShaded=null,this.materialsFlatShadedBackSide=null,this.materialsFlatShadedDoubleSide=null,this.setMaterial(e),this.meshCount=0,this.replaceMaterial=t=>{if(t.isMesh){let s;if(t.material.flatShading)switch(t.material.side){case F:s=this.materialsFlatShadedDoubleSide;break;case V:s=this.materialsFlatShadedBackSide;break;default:s=this.materialsFlatShaded;break}else switch(t.material.side){case F:s=this.materialsDoubleSide;break;case V:s=this.materialsBackSide;break;default:s=this.materials;break}this.originalMaterials.set(t,t.material),t.isSkinnedMesh?t.material=s[2]:t.isInstancedMesh?t.material=s[1]:t.material=s[0],++this.meshCount}}}cloneMaterial(e){if(!(e instanceof H))return e.clone();const t=e.uniforms,s=new Map;for(const r in t){const a=t[r].value;a.isRenderTargetTexture&&(t[r].value=null,s.set(r,a))}const i=e.clone();for(const r of s)t[r[0]].value=r[1],i.uniforms[r[0]].value=r[1];return i}setMaterial(e){if(this.disposeMaterials(),this.material=e,e!==null){const t=this.materials=[this.cloneMaterial(e),this.cloneMaterial(e),this.cloneMaterial(e)];for(const s of t)s.uniforms=Object.assign({},e.uniforms),s.side=De;t[2].skinning=!0,this.materialsBackSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.side=V,i}),this.materialsDoubleSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.side=F,i}),this.materialsFlatShaded=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i}),this.materialsFlatShadedBackSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i.side=V,i}),this.materialsFlatShadedDoubleSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i.side=F,i})}}render(e,t,s){const i=e.shadowMap.enabled;if(e.shadowMap.enabled=!1,q){const r=this.originalMaterials;this.meshCount=0,t.traverse(this.replaceMaterial),e.render(t,s);for(const a of r)a[0].material=a[1];this.meshCount!==r.size&&r.clear()}else{const r=t.overrideMaterial;t.overrideMaterial=this.material,e.render(t,s),t.overrideMaterial=r}e.shadowMap.enabled=i}disposeMaterials(){if(this.material!==null){const e=this.materials.concat(this.materialsBackSide).concat(this.materialsDoubleSide).concat(this.materialsFlatShaded).concat(this.materialsFlatShadedBackSide).concat(this.materialsFlatShadedDoubleSide);for(const t of e)t.dispose()}}dispose(){this.originalMaterials.clear(),this.disposeMaterials()}static get workaroundEnabled(){return q}static set workaroundEnabled(e){q=e}},P=-1,C=class extends te{constructor(e,t=P,s=P,i=1){super(),this.resizable=e,this.baseSize=new w(1,1),this.preferredSize=new w(t,s),this.target=this.preferredSize,this.s=i,this.effectiveSize=new w,this.addEventListener("change",()=>this.updateEffectiveSize()),this.updateEffectiveSize()}updateEffectiveSize(){const e=this.baseSize,t=this.preferredSize,s=this.effectiveSize,i=this.scale;t.width!==P?s.width=t.width:t.height!==P?s.width=Math.round(t.height*(e.width/Math.max(e.height,1))):s.width=Math.round(e.width*i),t.height!==P?s.height=t.height:t.width!==P?s.height=Math.round(t.width/Math.max(e.width/Math.max(e.height,1),1)):s.height=Math.round(e.height*i)}get width(){return this.effectiveSize.width}set width(e){this.preferredWidth=e}get height(){return this.effectiveSize.height}set height(e){this.preferredHeight=e}getWidth(){return this.width}getHeight(){return this.height}get scale(){return this.s}set scale(e){this.s!==e&&(this.s=e,this.preferredSize.setScalar(P),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getScale(){return this.scale}setScale(e){this.scale=e}get baseWidth(){return this.baseSize.width}set baseWidth(e){this.baseSize.width!==e&&(this.baseSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseWidth(){return this.baseWidth}setBaseWidth(e){this.baseWidth=e}get baseHeight(){return this.baseSize.height}set baseHeight(e){this.baseSize.height!==e&&(this.baseSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseHeight(){return this.baseHeight}setBaseHeight(e){this.baseHeight=e}setBaseSize(e,t){(this.baseSize.width!==e||this.baseSize.height!==t)&&(this.baseSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}get preferredWidth(){return this.preferredSize.width}set preferredWidth(e){this.preferredSize.width!==e&&(this.preferredSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredWidth(){return this.preferredWidth}setPreferredWidth(e){this.preferredWidth=e}get preferredHeight(){return this.preferredSize.height}set preferredHeight(e){this.preferredSize.height!==e&&(this.preferredSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredHeight(){return this.preferredHeight}setPreferredHeight(e){this.preferredHeight=e}setPreferredSize(e,t){(this.preferredSize.width!==e||this.preferredSize.height!==t)&&(this.preferredSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}copy(e){this.s=e.scale,this.baseSize.set(e.baseWidth,e.baseHeight),this.preferredSize.set(e.preferredWidth,e.preferredHeight),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height)}static get AUTO_SIZE(){return P}},u={SKIP:9,SET:30,ADD:0,ALPHA:1,AVERAGE:2,COLOR:3,COLOR_BURN:4,COLOR_DODGE:5,DARKEN:6,DIFFERENCE:7,DIVIDE:8,DST:9,EXCLUSION:10,HARD_LIGHT:11,HARD_MIX:12,HUE:13,INVERT:14,INVERT_RGB:15,LIGHTEN:16,LINEAR_BURN:17,LINEAR_DODGE:18,LINEAR_LIGHT:19,LUMINOSITY:20,MULTIPLY:21,NEGATION:22,NORMAL:23,OVERLAY:24,PIN_LIGHT:25,REFLECT:26,SATURATION:27,SCREEN:28,SOFT_LIGHT:29,SRC:30,SUBTRACT:31,VIVID_LIGHT:32},at="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y,opacity);}",ot="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,min(y.a,opacity));}",lt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y)*0.5,opacity);}",ht="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.rg,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",ut="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(step(0.0,y)*(1.0-min(vec4(1.0),(1.0-x)/y)),vec4(1.0),step(1.0,x));return mix(x,z,opacity);}",ct="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=step(0.0,x)*mix(min(vec4(1.0),x/max(1.0-y,1e-9)),vec4(1.0),step(1.0,y));return mix(x,z,opacity);}",dt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x,y),opacity);}",ft="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,abs(x-y),opacity);}",pt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x/max(y,1e-12),opacity);}",gt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y-2.0*x*y),opacity);}",mt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 a=min(x,1.0),b=min(y,1.0);vec4 z=mix(2.0*a*b,1.0-2.0*(1.0-a)*(1.0-b),step(0.5,y));return mix(x,z,opacity);}",vt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,step(1.0,x+y),opacity);}",St="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.r,xHSL.gb));return vec4(mix(x.rgb,z,opacity),y.a);}",xt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-y,opacity);}",Tt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y*(1.0-x),opacity);}",yt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x,y),opacity);}",Et="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(y+x-1.0,0.0,1.0),opacity);}",Mt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x+y,1.0),opacity);}",bt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(2.0*y+x-1.0,0.0,1.0),opacity);}",wt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.rg,yHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",_t="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x*y,opacity);}",Rt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-abs(1.0-x-y),opacity);}",At="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,opacity);}",Pt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(2.0*y*x,1.0-2.0*(1.0-y)*(1.0-x),step(0.5,x));return mix(x,z,opacity);}",Dt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 z=mix(mix(y2,x,step(0.5*x,y)),max(vec4(0.0),y2-1.0),step(x,(y2-1.0)));return mix(x,z,opacity);}",Bt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(min(x*x/max(1.0-y,1e-12),1.0),y,step(1.0,y));return mix(x,z,opacity);}",Ct="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.r,yHSL.g,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",It="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y-min(x*y,1.0),opacity);}",Nt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 w=step(0.5,y);vec4 z=mix(x-(1.0-y2)*x*(1.0-x),mix(x+(y2-1.0)*(sqrt(x)-x),x+(y2-1.0)*x*((16.0*x-12.0)*x+3.0),w*(1.0-step(0.25,x))),w);return mix(x,z,opacity);}",zt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y;}",Ft="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x+y-1.0,0.0),opacity);}",Lt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(max(1.0-min((1.0-x)/(2.0*y),1.0),0.0),min(x/(2.0*(1.0-y)),1.0),step(0.5,y));return mix(x,z,opacity);}",Ht=new Map([[u.ADD,at],[u.ALPHA,ot],[u.AVERAGE,lt],[u.COLOR,ht],[u.COLOR_BURN,ut],[u.COLOR_DODGE,ct],[u.DARKEN,dt],[u.DIFFERENCE,ft],[u.DIVIDE,pt],[u.DST,null],[u.EXCLUSION,gt],[u.HARD_LIGHT,mt],[u.HARD_MIX,vt],[u.HUE,St],[u.INVERT,xt],[u.INVERT_RGB,Tt],[u.LIGHTEN,yt],[u.LINEAR_BURN,Et],[u.LINEAR_DODGE,Mt],[u.LINEAR_LIGHT,bt],[u.LUMINOSITY,wt],[u.MULTIPLY,_t],[u.NEGATION,Rt],[u.NORMAL,At],[u.OVERLAY,Pt],[u.PIN_LIGHT,Dt],[u.REFLECT,Bt],[u.SATURATION,Ct],[u.SCREEN,It],[u.SOFT_LIGHT,Nt],[u.SRC,zt],[u.SUBTRACT,Ft],[u.VIVID_LIGHT,Lt]]),Ut=class extends te{constructor(e,t=1){super(),this._blendFunction=e,this.opacity=new p(t)}getOpacity(){return this.opacity.value}setOpacity(e){this.opacity.value=e}get blendFunction(){return this._blendFunction}set blendFunction(e){this._blendFunction=e,this.dispatchEvent({type:"change"})}getBlendFunction(){return this.blendFunction}setBlendFunction(e){this.blendFunction=e}getShaderCode(){return Ht.get(this.blendFunction)}},Gt=class extends te{constructor(e,t,{attributes:s=D.NONE,blendFunction:i=u.NORMAL,defines:r=new Map,uniforms:a=new Map,extensions:n=null,vertexShader:o=null}={}){super(),this.name=e,this.renderer=null,this.attributes=s,this.fragmentShader=t,this.vertexShader=o,this.defines=r,this.uniforms=a,this.extensions=n,this.blendMode=new Ut(i),this.blendMode.addEventListener("change",h=>this.setChanged()),this._inputColorSpace=xe,this._outputColorSpace=Te}get inputColorSpace(){return this._inputColorSpace}set inputColorSpace(e){this._inputColorSpace=e,this.setChanged()}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e,this.setChanged()}set mainScene(e){}set mainCamera(e){}getName(){return this.name}setRenderer(e){this.renderer=e}getDefines(){return this.defines}getUniforms(){return this.uniforms}getExtensions(){return this.extensions}getBlendMode(){return this.blendMode}getAttributes(){return this.attributes}setAttributes(e){this.attributes=e,this.setChanged()}getFragmentShader(){return this.fragmentShader}setFragmentShader(e){this.fragmentShader=e,this.setChanged()}getVertexShader(){return this.vertexShader}setVertexShader(e){this.vertexShader=e,this.setChanged()}setChanged(){this.dispatchEvent({type:"change"})}setDepthTexture(e,t=N){}update(e,t,s){}setSize(e,t){}initialize(e,t,s){}dispose(){for(const e of Object.keys(this)){const t=this[e];(t instanceof I||t instanceof ye||t instanceof Ee||t instanceof R)&&this[e].dispose()}}},ne={VERY_SMALL:0,SMALL:1,MEDIUM:2,LARGE:3,VERY_LARGE:4,HUGE:5},kt=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;
#include <colorspace_fragment>
}`,Ot="uniform vec4 texelSize;uniform float kernel;uniform float scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize.xy*vec2(kernel)+texelSize.zw)*scale;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}",Vt=[new Float32Array([0,0]),new Float32Array([0,1,1]),new Float32Array([0,1,1,2]),new Float32Array([0,1,2,2,3]),new Float32Array([0,1,2,3,4,4,5]),new Float32Array([0,1,2,3,4,5,7,8,9,10])],Wt=class extends H{constructor(e=new le){super({name:"KawaseBlurMaterial",uniforms:{inputBuffer:new p(null),texelSize:new p(new le),scale:new p(1),kernel:new p(0)},blending:k,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:kt,vertexShader:Ot}),this.setTexelSize(e.x,e.y),this.kernelSize=ne.MEDIUM}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.inputBuffer=e}get kernelSequence(){return Vt[this.kernelSize]}get scale(){return this.uniforms.scale.value}set scale(e){this.uniforms.scale.value=e}getScale(){return this.uniforms.scale.value}setScale(e){this.uniforms.scale.value=e}getKernel(){return null}get kernel(){return this.uniforms.kernel.value}set kernel(e){this.uniforms.kernel.value=e}setKernel(e){this.kernel=e}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t,e*.5,t*.5)}setSize(e,t){const s=1/e,i=1/t;this.uniforms.texelSize.value.set(s,i,s*.5,i*.5)}},Kt=class extends R{constructor({kernelSize:e=ne.MEDIUM,resolutionScale:t=.5,width:s=C.AUTO_SIZE,height:i=C.AUTO_SIZE,resolutionX:r=s,resolutionY:a=i}={}){super("KawaseBlurPass"),this.renderTargetA=new I(1,1,{depthBuffer:!1}),this.renderTargetA.texture.name="Blur.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="Blur.Target.B";const n=this.resolution=new C(this,r,a,t);n.addEventListener("change",o=>this.setSize(n.baseWidth,n.baseHeight)),this._blurMaterial=new Wt,this._blurMaterial.kernelSize=e,this.copyMaterial=new Me}getResolution(){return this.resolution}get blurMaterial(){return this._blurMaterial}set blurMaterial(e){this._blurMaterial=e}get dithering(){return this.copyMaterial.dithering}set dithering(e){this.copyMaterial.dithering=e}get kernelSize(){return this.blurMaterial.kernelSize}set kernelSize(e){this.blurMaterial.kernelSize=e}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get scale(){return this.blurMaterial.scale}set scale(e){this.blurMaterial.scale=e}getScale(){return this.blurMaterial.scale}setScale(e){this.blurMaterial.scale=e}getKernelSize(){return this.kernelSize}setKernelSize(e){this.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,s,i,r){const a=this.scene,n=this.camera,o=this.renderTargetA,h=this.renderTargetB,f=this.blurMaterial,E=f.kernelSequence;let m=t;this.fullscreenMaterial=f;for(let _=0,l=E.length;_<l;++_){const A=_&1?h:o;f.kernel=E[_],f.inputBuffer=m.texture,e.setRenderTarget(A),e.render(a,n),m=A}this.fullscreenMaterial=this.copyMaterial,this.copyMaterial.inputBuffer=m.texture,e.setRenderTarget(this.renderToScreen?null:s),e.render(a,n)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t);const i=s.width,r=s.height;this.renderTargetA.setSize(i,r),this.renderTargetB.setSize(i,r),this.blurMaterial.setSize(e,t)}initialize(e,t,s){s!==void 0&&(this.renderTargetA.texture.type=s,this.renderTargetB.texture.type=s,s!==L?(this.blurMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1",this.copyMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1"):e!==null&&e.outputColorSpace===T&&(this.renderTargetA.texture.colorSpace=T,this.renderTargetB.texture.colorSpace=T))}static get AUTO_SIZE(){return C.AUTO_SIZE}},pe=class extends R{constructor(e,t="inputBuffer"){super("ShaderPass"),this.fullscreenMaterial=e,this.input=t}setInput(e){this.input=e}render(e,t,s,i,r){const a=this.fullscreenMaterial.uniforms;t!==null&&a!==void 0&&a[this.input]!==void 0&&(a[this.input].value=t.texture),e.setRenderTarget(this.renderToScreen?null:s),e.render(this.scene,this.camera)}initialize(e,t,s){s!==void 0&&s!==L&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}},$={DEFAULT:0,KEEP_MAX_DEPTH:1,DISCARD_MAX_DEPTH:2},Xt=`#include <common>
#include <packing>
#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer0;uniform highp sampler2D depthBuffer1;
#else
uniform mediump sampler2D depthBuffer0;uniform mediump sampler2D depthBuffer1;
#endif
uniform sampler2D inputBuffer;uniform vec2 cameraNearFar;float getViewZ(const in float depth){
#ifdef PERSPECTIVE_CAMERA
return perspectiveDepthToViewZ(depth,cameraNearFar.x,cameraNearFar.y);
#else
return orthographicDepthToViewZ(depth,cameraNearFar.x,cameraNearFar.y);
#endif
}varying vec2 vUv;void main(){vec2 depth;
#if DEPTH_PACKING_0 == 3201
depth.x=unpackRGBAToDepth(texture2D(depthBuffer0,vUv));
#else
depth.x=texture2D(depthBuffer0,vUv).r;
#ifdef LOG_DEPTH
float d=pow(2.0,depth.x*log2(cameraNearFar.y+1.0))-1.0;float a=cameraNearFar.y/(cameraNearFar.y-cameraNearFar.x);float b=cameraNearFar.y*cameraNearFar.x/(cameraNearFar.x-cameraNearFar.y);depth.x=a+b/d;
#endif
#endif
#if DEPTH_PACKING_1 == 3201
depth.y=unpackRGBAToDepth(texture2D(depthBuffer1,vUv));
#else
depth.y=texture2D(depthBuffer1,vUv).r;
#ifdef LOG_DEPTH
float d=pow(2.0,depth.y*log2(cameraNearFar.y+1.0))-1.0;float a=cameraNearFar.y/(cameraNearFar.y-cameraNearFar.x);float b=cameraNearFar.y*cameraNearFar.x/(cameraNearFar.x-cameraNearFar.y);depth.y=a+b/d;
#endif
#endif
bool isMaxDepth=(depth.x==1.0);
#ifdef PERSPECTIVE_CAMERA
depth.x=viewZToOrthographicDepth(getViewZ(depth.x),cameraNearFar.x,cameraNearFar.y);depth.y=viewZToOrthographicDepth(getViewZ(depth.y),cameraNearFar.x,cameraNearFar.y);
#endif
#if DEPTH_TEST_STRATEGY == 0
bool keep=depthTest(depth.x,depth.y);
#elif DEPTH_TEST_STRATEGY == 1
bool keep=isMaxDepth||depthTest(depth.x,depth.y);
#else
bool keep=!isMaxDepth&&depthTest(depth.x,depth.y);
#endif
if(keep){gl_FragColor=texture2D(inputBuffer,vUv);}else{discard;}}`,jt=class extends H{constructor(){super({name:"DepthMaskMaterial",defines:{DEPTH_EPSILON:"0.0001",DEPTH_PACKING_0:"0",DEPTH_PACKING_1:"0",DEPTH_TEST_STRATEGY:$.KEEP_MAX_DEPTH},uniforms:{inputBuffer:new p(null),depthBuffer0:new p(null),depthBuffer1:new p(null),cameraNearFar:new p(new w(1,1))},blending:k,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Xt,vertexShader:ie}),this.depthMode=ae}set depthBuffer0(e){this.uniforms.depthBuffer0.value=e}set depthPacking0(e){this.defines.DEPTH_PACKING_0=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer0(e,t=N){this.depthBuffer0=e,this.depthPacking0=t}set depthBuffer1(e){this.uniforms.depthBuffer1.value=e}set depthPacking1(e){this.defines.DEPTH_PACKING_1=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer1(e,t=N){this.depthBuffer1=e,this.depthPacking1=t}get maxDepthStrategy(){return Number(this.defines.DEPTH_TEST_STRATEGY)}set maxDepthStrategy(e){this.defines.DEPTH_TEST_STRATEGY=e.toFixed(0),this.needsUpdate=!0}get keepFar(){return this.maxDepthStrategy}set keepFar(e){this.maxDepthStrategy=e?$.KEEP_MAX_DEPTH:$.DISCARD_MAX_DEPTH}getMaxDepthStrategy(){return this.maxDepthStrategy}setMaxDepthStrategy(e){this.maxDepthStrategy=e}get epsilon(){return Number(this.defines.DEPTH_EPSILON)}set epsilon(e){this.defines.DEPTH_EPSILON=e.toFixed(16),this.needsUpdate=!0}getEpsilon(){return this.epsilon}setEpsilon(e){this.epsilon=e}get depthMode(){return Number(this.defines.DEPTH_MODE)}set depthMode(e){let t;switch(e){case ke:t="false";break;case Ge:t="true";break;case Ue:t="abs(d1 - d0) <= DEPTH_EPSILON";break;case He:t="abs(d1 - d0) > DEPTH_EPSILON";break;case ae:t="d0 > d1";break;case Le:t="d0 >= d1";break;case Fe:t="d0 <= d1";break;case ze:default:t="d0 < d1";break}this.defines.DEPTH_MODE=e.toFixed(0),this.defines["depthTest(d0, d1)"]=t,this.needsUpdate=!0}getDepthMode(){return this.depthMode}setDepthMode(e){this.depthMode=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNearFar.value.set(e.near,e.far),e instanceof se?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}},Zt=`#include <common>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
uniform vec2 lightPosition;uniform float exposure;uniform float decay;uniform float density;uniform float weight;uniform float clampMax;varying vec2 vUv;void main(){vec2 coord=vUv;vec2 delta=lightPosition-coord;delta*=1.0/SAMPLES_FLOAT*density;float illuminationDecay=1.0;vec4 color=vec4(0.0);for(int i=0;i<SAMPLES_INT;++i){coord+=delta;vec4 texel=texture2D(inputBuffer,coord);texel*=illuminationDecay*weight;color+=texel;illuminationDecay*=decay;}gl_FragColor=clamp(color*exposure,0.0,clampMax);
#include <dithering_fragment>
}`,Yt=class extends H{constructor(e){super({name:"GodRaysMaterial",defines:{SAMPLES_INT:"60",SAMPLES_FLOAT:"60.0"},uniforms:{inputBuffer:new p(null),lightPosition:new p(e),density:new p(1),decay:new p(1),weight:new p(1),exposure:new p(1),clampMax:new p(1)},blending:k,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Zt,vertexShader:ie})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get lightPosition(){return this.uniforms.lightPosition.value}getLightPosition(){return this.uniforms.lightPosition.value}setLightPosition(e){this.uniforms.lightPosition.value=e}get density(){return this.uniforms.density.value}set density(e){this.uniforms.density.value=e}getDensity(){return this.uniforms.density.value}setDensity(e){this.uniforms.density.value=e}get decay(){return this.uniforms.decay.value}set decay(e){this.uniforms.decay.value=e}getDecay(){return this.uniforms.decay.value}setDecay(e){this.uniforms.decay.value=e}get weight(){return this.uniforms.weight.value}set weight(e){this.uniforms.weight.value=e}getWeight(){return this.uniforms.weight.value}setWeight(e){this.uniforms.weight.value=e}get exposure(){return this.uniforms.exposure.value}set exposure(e){this.uniforms.exposure.value=e}getExposure(){return this.uniforms.exposure.value}setExposure(e){this.uniforms.exposure.value=e}get maxIntensity(){return this.uniforms.clampMax.value}set maxIntensity(e){this.uniforms.clampMax.value=e}getMaxIntensity(){return this.uniforms.clampMax.value}setMaxIntensity(e){this.uniforms.clampMax.value=e}get samples(){return Number(this.defines.SAMPLES_INT)}set samples(e){const t=Math.floor(e);this.defines.SAMPLES_INT=t.toFixed(0),this.defines.SAMPLES_FLOAT=t.toFixed(1),this.needsUpdate=!0}getSamples(){return this.samples}setSamples(e){this.samples=e}},be=class extends R{constructor(e,t,s=null){super("RenderPass",e,t),this.needsSwap=!1,this.clearPass=new re,this.overrideMaterialManager=s===null?null:new fe(s),this.ignoreBackground=!1,this.skipShadowMapUpdate=!1,this.selection=null}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get renderToScreen(){return super.renderToScreen}set renderToScreen(e){super.renderToScreen=e,this.clearPass.renderToScreen=e}get overrideMaterial(){const e=this.overrideMaterialManager;return e!==null?e.material:null}set overrideMaterial(e){const t=this.overrideMaterialManager;e!==null?t!==null?t.setMaterial(e):this.overrideMaterialManager=new fe(e):t!==null&&(t.dispose(),this.overrideMaterialManager=null)}getOverrideMaterial(){return this.overrideMaterial}setOverrideMaterial(e){this.overrideMaterial=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getSelection(){return this.selection}setSelection(e){this.selection=e}isBackgroundDisabled(){return this.ignoreBackground}setBackgroundDisabled(e){this.ignoreBackground=e}isShadowMapDisabled(){return this.skipShadowMapUpdate}setShadowMapDisabled(e){this.skipShadowMapUpdate=e}getClearPass(){return this.clearPass}render(e,t,s,i,r){const a=this.scene,n=this.camera,o=this.selection,h=n.layers.mask,f=a.background,E=e.shadowMap.autoUpdate,m=this.renderToScreen?null:t;o!==null&&n.layers.set(o.getLayer()),this.skipShadowMapUpdate&&(e.shadowMap.autoUpdate=!1),(this.ignoreBackground||this.clearPass.overrideClearColor!==null)&&(a.background=null),this.clearPass.enabled&&this.clearPass.render(e,t),e.setRenderTarget(m),this.overrideMaterialManager!==null?this.overrideMaterialManager.render(e,a,n):e.render(a,n),n.layers.mask=h,a.background=f,e.shadowMap.autoUpdate=E}},qt=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D map;
#else
uniform lowp sampler2D map;
#endif
void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){outputColor=texture2D(map,uv);}`,Q=new Be,ge=new Ce,$t=class extends Gt{constructor(e,t,{blendFunction:s=u.SCREEN,samples:i=60,density:r=.96,decay:a=.9,weight:n=.4,exposure:o=.6,clampMax:h=1,blur:f=!0,kernelSize:E=ne.SMALL,resolutionScale:m=.5,width:_=C.AUTO_SIZE,height:l=C.AUTO_SIZE,resolutionX:A=_,resolutionY:M=l}={}){super("GodRaysEffect",qt,{blendFunction:s,attributes:D.DEPTH,uniforms:new Map([["map",new p(null)]])}),this.camera=e,this._lightSource=t,this.lightSource=t,this.lightScene=new W,this.screenPosition=new w,this.renderTargetA=new I(1,1,{depthBuffer:!1}),this.renderTargetA.texture.name="GodRays.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="GodRays.Target.B",this.uniforms.get("map").value=this.renderTargetB.texture,this.renderTargetLight=new I(1,1),this.renderTargetLight.texture.name="GodRays.Light",this.renderTargetLight.depthTexture=new ve,this.renderPassLight=new be(this.lightScene,e),this.renderPassLight.clearPass.overrideClearColor=new G(0),this.clearPass=new re(!0,!1,!1),this.clearPass.overrideClearColor=new G(0),this.blurPass=new Kt({kernelSize:E}),this.blurPass.enabled=f,this.depthMaskPass=new pe(new jt);const b=this.depthMaskMaterial;b.depthBuffer1=this.renderTargetLight.depthTexture,b.copyCameraSettings(e),this.godRaysPass=new pe(new Yt(this.screenPosition));const v=this.godRaysMaterial;v.density=r,v.decay=a,v.weight=n,v.exposure=o,v.maxIntensity=h,v.samples=i;const g=this.resolution=new C(this,A,M,m);g.addEventListener("change",S=>this.setSize(g.baseWidth,g.baseHeight))}set mainCamera(e){this.camera=e,this.renderPassLight.mainCamera=e,this.depthMaskMaterial.copyCameraSettings(e)}get lightSource(){return this._lightSource}set lightSource(e){this._lightSource=e,e!==null&&(e.material.depthWrite=!1,e.material.transparent=!0)}getBlurPass(){return this.blurPass}get texture(){return this.renderTargetB.texture}getTexture(){return this.texture}get depthMaskMaterial(){return this.depthMaskPass.fullscreenMaterial}get godRaysMaterial(){return this.godRaysPass.fullscreenMaterial}getGodRaysMaterial(){return this.godRaysMaterial}getResolution(){return this.resolution}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get dithering(){return this.godRaysMaterial.dithering}set dithering(e){const t=this.godRaysMaterial;t.dithering=e,t.needsUpdate=!0}get blur(){return this.blurPass.enabled}set blur(e){this.blurPass.enabled=e}get kernelSize(){return this.blurPass.kernelSize}set kernelSize(e){this.blurPass.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}get samples(){return this.godRaysMaterial.samples}set samples(e){this.godRaysMaterial.samples=e}setDepthTexture(e,t=N){this.depthMaskPass.fullscreenMaterial.depthBuffer0=e,this.depthMaskPass.fullscreenMaterial.depthPacking0=t}update(e,t,s){const i=this.lightSource,r=i.parent,a=i.matrixAutoUpdate,n=this.renderTargetA,o=this.renderTargetLight;i.material.depthWrite=!0,i.matrixAutoUpdate=!1,i.updateWorldMatrix(!0,!1),r!==null&&(a||ge.copy(i.matrix),i.matrix.copy(i.matrixWorld)),this.lightScene.add(i),this.renderPassLight.render(e,o),this.clearPass.render(e,n),this.depthMaskPass.render(e,o,n),i.material.depthWrite=!1,i.matrixAutoUpdate=a,r!==null&&(a||i.matrix.copy(ge),r.add(i)),Q.setFromMatrixPosition(i.matrixWorld).project(this.camera),this.screenPosition.set(Math.min(Math.max((Q.x+1)*.5,-1),2),Math.min(Math.max((Q.y+1)*.5,-1),2)),this.blurPass.enabled&&this.blurPass.render(e,n,n),this.godRaysPass.render(e,n,this.renderTargetB)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t);const i=s.width,r=s.height;this.renderTargetA.setSize(i,r),this.renderTargetB.setSize(i,r),this.renderTargetLight.setSize(i,r),this.blurPass.resolution.copy(s)}initialize(e,t,s){this.blurPass.initialize(e,t,s),this.renderPassLight.initialize(e,t,s),this.depthMaskPass.initialize(e,t,s),this.godRaysPass.initialize(e,t,s),s!==void 0&&(this.renderTargetA.texture.type=s,this.renderTargetB.texture.type=s,this.renderTargetLight.texture.type=s,e!==null&&e.outputColorSpace===T&&(this.renderTargetA.texture.colorSpace=T,this.renderTargetB.texture.colorSpace=T,this.renderTargetLight.texture.colorSpace=T))}},Qt=`#include <common>
#include <packing>
#include <dithering_pars_fragment>
#define packFloatToRGBA(v) packDepthToRGBA(v)
#define unpackRGBAToFloat(v) unpackRGBAToDepth(v)
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#if DEPTH_PACKING == 3201
uniform lowp sampler2D depthBuffer;
#elif defined(GL_FRAGMENT_PRECISION_HIGH)
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;vec4 sRGBToLinear(const in vec4 value){return vec4(mix(pow(value.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),value.rgb*0.0773993808,vec3(lessThanEqual(value.rgb,vec3(0.04045)))),value.a);}float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}float getViewZ(const in float depth){
#ifdef PERSPECTIVE_CAMERA
return perspectiveDepthToViewZ(depth,cameraNear,cameraFar);
#else
return orthographicDepthToViewZ(depth,cameraNear,cameraFar);
#endif
}vec3 RGBToHCV(const in vec3 RGB){vec4 P=mix(vec4(RGB.bg,-1.0,2.0/3.0),vec4(RGB.gb,0.0,-1.0/3.0),step(RGB.b,RGB.g));vec4 Q=mix(vec4(P.xyw,RGB.r),vec4(RGB.r,P.yzx),step(P.x,RGB.r));float C=Q.x-min(Q.w,Q.y);float H=abs((Q.w-Q.y)/(6.0*C+EPSILON)+Q.z);return vec3(H,C,Q.x);}vec3 RGBToHSL(const in vec3 RGB){vec3 HCV=RGBToHCV(RGB);float L=HCV.z-HCV.y*0.5;float S=HCV.y/(1.0-abs(L*2.0-1.0)+EPSILON);return vec3(HCV.x,S,L);}vec3 HueToRGB(const in float H){float R=abs(H*6.0-3.0)-1.0;float G=2.0-abs(H*6.0-2.0);float B=2.0-abs(H*6.0-4.0);return clamp(vec3(R,G,B),0.0,1.0);}vec3 HSLToRGB(const in vec3 HSL){vec3 RGB=HueToRGB(HSL.x);float C=(1.0-abs(2.0*HSL.z-1.0))*HSL.y;return(RGB-0.5)*C+HSL.z;}FRAGMENT_HEAD void main(){FRAGMENT_MAIN_UV vec4 color0=texture2D(inputBuffer,UV);vec4 color1=vec4(0.0);FRAGMENT_MAIN_IMAGE color0.a=clamp(color0.a,0.0,1.0);gl_FragColor=color0;
#ifdef ENCODE_OUTPUT
#include <colorspace_fragment>
#endif
#include <dithering_fragment>
}`,Jt="uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;VERTEX_HEAD void main(){vUv=position.xy*0.5+0.5;VERTEX_MAIN_SUPPORT gl_Position=vec4(position.xy,1.0,1.0);}",es=class extends H{constructor(e,t,s,i,r=!1){super({name:"EffectMaterial",defines:{THREE_REVISION:Ie.replace(/\D+/g,""),DEPTH_PACKING:"0",ENCODE_OUTPUT:"1"},uniforms:{inputBuffer:new p(null),depthBuffer:new p(null),resolution:new p(new w),texelSize:new p(new w),cameraNear:new p(.3),cameraFar:new p(1e3),aspect:new p(1),time:new p(0)},blending:k,toneMapped:!1,depthWrite:!1,depthTest:!1,dithering:r}),e&&this.setShaderParts(e),t&&this.setDefines(t),s&&this.setUniforms(s),this.copyCameraSettings(i)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get depthBuffer(){return this.uniforms.depthBuffer.value}set depthBuffer(e){this.uniforms.depthBuffer.value=e}get depthPacking(){return Number(this.defines.DEPTH_PACKING)}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer(e,t=N){this.depthBuffer=e,this.depthPacking=t}setShaderData(e){this.setShaderParts(e.shaderParts),this.setDefines(e.defines),this.setUniforms(e.uniforms),this.setExtensions(e.extensions)}setShaderParts(e){return this.fragmentShader=Qt.replace(c.FRAGMENT_HEAD,e.get(c.FRAGMENT_HEAD)||"").replace(c.FRAGMENT_MAIN_UV,e.get(c.FRAGMENT_MAIN_UV)||"").replace(c.FRAGMENT_MAIN_IMAGE,e.get(c.FRAGMENT_MAIN_IMAGE)||""),this.vertexShader=Jt.replace(c.VERTEX_HEAD,e.get(c.VERTEX_HEAD)||"").replace(c.VERTEX_MAIN_SUPPORT,e.get(c.VERTEX_MAIN_SUPPORT)||""),this.needsUpdate=!0,this}setDefines(e){for(const t of e.entries())this.defines[t[0]]=t[1];return this.needsUpdate=!0,this}setUniforms(e){for(const t of e.entries())this.uniforms[t[0]]=t[1];return this}setExtensions(e){this.extensions={};for(const t of e)this.extensions[t]=!0;return this}get encodeOutput(){return this.defines.ENCODE_OUTPUT!==void 0}set encodeOutput(e){this.encodeOutput!==e&&(e?this.defines.ENCODE_OUTPUT="1":delete this.defines.ENCODE_OUTPUT,this.needsUpdate=!0)}isOutputEncodingEnabled(e){return this.encodeOutput}setOutputEncodingEnabled(e){this.encodeOutput=e}get time(){return this.uniforms.time.value}set time(e){this.uniforms.time.value=e}setDeltaTime(e){this.uniforms.time.value+=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNear.value=e.near,this.uniforms.cameraFar.value=e.far,e instanceof se?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}setSize(e,t){const s=this.uniforms;s.resolution.value.set(e,t),s.texelSize.value.set(1/e,1/t),s.aspect.value=e/t}static get Section(){return c}};function me(e,t,s){for(const i of t){const r="$1"+e+i.charAt(0).toUpperCase()+i.slice(1),a=new RegExp("([^\\.])(\\b"+i+"\\b)","g");for(const n of s.entries())n[1]!==null&&s.set(n[0],n[1].replace(a,r))}}function ts(e,t,s){let i=t.getFragmentShader(),r=t.getVertexShader();const a=i!==void 0&&/mainImage/.test(i),n=i!==void 0&&/mainUv/.test(i);if(s.attributes|=t.getAttributes(),i===void 0)throw new Error(`Missing fragment shader (${t.name})`);if(n&&s.attributes&D.CONVOLUTION)throw new Error(`Effects that transform UVs are incompatible with convolution effects (${t.name})`);if(!a&&!n)throw new Error(`Could not find mainImage or mainUv function (${t.name})`);{const o=/\w+\s+(\w+)\([\w\s,]*\)\s*{/g,h=s.shaderParts;let f=h.get(c.FRAGMENT_HEAD)||"",E=h.get(c.FRAGMENT_MAIN_UV)||"",m=h.get(c.FRAGMENT_MAIN_IMAGE)||"",_=h.get(c.VERTEX_HEAD)||"",l=h.get(c.VERTEX_MAIN_SUPPORT)||"";const A=new Set,M=new Set;if(n&&(E+=`	${e}MainUv(UV);
`,s.uvTransformation=!0),r!==null&&/mainSupport/.test(r)){const g=/mainSupport *\([\w\s]*?uv\s*?\)/.test(r);l+=`	${e}MainSupport(`,l+=g?`vUv);
`:`);
`;for(const S of r.matchAll(/(?:varying\s+\w+\s+([\S\s]*?);)/g))for(const U of S[1].split(/\s*,\s*/))s.varyings.add(U),A.add(U),M.add(U);for(const S of r.matchAll(o))M.add(S[1])}for(const g of i.matchAll(o))M.add(g[1]);for(const g of t.defines.keys())M.add(g.replace(/\([\w\s,]*\)/g,""));for(const g of t.uniforms.keys())M.add(g);M.delete("while"),M.delete("for"),M.delete("if"),t.uniforms.forEach((g,S)=>s.uniforms.set(e+S.charAt(0).toUpperCase()+S.slice(1),g)),t.defines.forEach((g,S)=>s.defines.set(e+S.charAt(0).toUpperCase()+S.slice(1),g));const b=new Map([["fragment",i],["vertex",r]]);me(e,M,s.defines),me(e,M,b),i=b.get("fragment"),r=b.get("vertex");const v=t.blendMode;if(s.blendModes.set(v.blendFunction,v),a){t.inputColorSpace!==null&&t.inputColorSpace!==s.colorSpace&&(m+=t.inputColorSpace===T?`color0 = sRGBTransferOETF(color0);
	`:`color0 = sRGBToLinear(color0);
	`),t.outputColorSpace!==Te?s.colorSpace=t.outputColorSpace:t.inputColorSpace!==null&&(s.colorSpace=t.inputColorSpace);const g=/MainImage *\([\w\s,]*?depth[\w\s,]*?\)/;m+=`${e}MainImage(color0, UV, `,s.attributes&D.DEPTH&&g.test(i)&&(m+="depth, ",s.readDepth=!0),m+=`color1);
	`;const S=e+"BlendOpacity";s.uniforms.set(S,v.opacity),m+=`color0 = blend${v.blendFunction}(color0, color1, ${S});

	`,f+=`uniform float ${S};

`}if(f+=i+`
`,r!==null&&(_+=r+`
`),h.set(c.FRAGMENT_HEAD,f),h.set(c.FRAGMENT_MAIN_UV,E),h.set(c.FRAGMENT_MAIN_IMAGE,m),h.set(c.VERTEX_HEAD,_),h.set(c.VERTEX_MAIN_SUPPORT,l),t.extensions!==null)for(const g of t.extensions)s.extensions.add(g)}}var ss=class extends R{constructor(e,...t){super("EffectPass"),this.fullscreenMaterial=new es(null,null,null,e),this.listener=s=>this.handleEvent(s),this.effects=[],this.setEffects(t),this.skipRendering=!1,this.minTime=1,this.maxTime=Number.POSITIVE_INFINITY,this.timeScale=1}set mainScene(e){for(const t of this.effects)t.mainScene=e}set mainCamera(e){this.fullscreenMaterial.copyCameraSettings(e);for(const t of this.effects)t.mainCamera=e}get encodeOutput(){return this.fullscreenMaterial.encodeOutput}set encodeOutput(e){this.fullscreenMaterial.encodeOutput=e}get dithering(){return this.fullscreenMaterial.dithering}set dithering(e){const t=this.fullscreenMaterial;t.dithering=e,t.needsUpdate=!0}setEffects(e){for(const t of this.effects)t.removeEventListener("change",this.listener);this.effects=e.sort((t,s)=>s.attributes-t.attributes);for(const t of this.effects)t.addEventListener("change",this.listener)}updateMaterial(){const e=new nt;let t=0;for(const n of this.effects)if(n.blendMode.blendFunction===u.DST)e.attributes|=n.getAttributes()&D.DEPTH;else{if(e.attributes&n.getAttributes()&D.CONVOLUTION)throw new Error(`Convolution effects cannot be merged (${n.name})`);ts("e"+t++,n,e)}let s=e.shaderParts.get(c.FRAGMENT_HEAD),i=e.shaderParts.get(c.FRAGMENT_MAIN_IMAGE),r=e.shaderParts.get(c.FRAGMENT_MAIN_UV);const a=/\bblend\b/g;for(const n of e.blendModes.values())s+=n.getShaderCode().replace(a,`blend${n.blendFunction}`)+`
`;e.attributes&D.DEPTH?(e.readDepth&&(i=`float depth = readDepth(UV);

	`+i),this.needsDepthTexture=this.getDepthTexture()===null):this.needsDepthTexture=!1,e.colorSpace===T&&(i+=`color0 = sRGBToLinear(color0);
	`),e.uvTransformation?(r=`vec2 transformedUv = vUv;
`+r,e.defines.set("UV","transformedUv")):e.defines.set("UV","vUv"),e.shaderParts.set(c.FRAGMENT_HEAD,s),e.shaderParts.set(c.FRAGMENT_MAIN_IMAGE,i),e.shaderParts.set(c.FRAGMENT_MAIN_UV,r);for(const[n,o]of e.shaderParts)o!==null&&e.shaderParts.set(n,o.trim().replace(/^#/,`
#`));this.skipRendering=t===0,this.needsSwap=!this.skipRendering,this.fullscreenMaterial.setShaderData(e)}recompile(){this.updateMaterial()}getDepthTexture(){return this.fullscreenMaterial.depthBuffer}setDepthTexture(e,t=N){this.fullscreenMaterial.depthBuffer=e,this.fullscreenMaterial.depthPacking=t;for(const s of this.effects)s.setDepthTexture(e,t)}render(e,t,s,i,r){for(const a of this.effects)a.update(e,t,i);if(!this.skipRendering||this.renderToScreen){const a=this.fullscreenMaterial;a.inputBuffer=t.texture,a.time+=i*this.timeScale,e.setRenderTarget(this.renderToScreen?null:s),e.render(this.scene,this.camera)}}setSize(e,t){this.fullscreenMaterial.setSize(e,t);for(const s of this.effects)s.setSize(e,t)}initialize(e,t,s){this.renderer=e;for(const i of this.effects)i.initialize(e,t,s);this.updateMaterial(),s!==void 0&&s!==L&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}dispose(){super.dispose();for(const e of this.effects)e.removeEventListener("change",this.listener),e.dispose()}handleEvent(e){switch(e.type){case"change":this.recompile();break}}};const J={x:0,y:0,z:0};function is(){const e=new W;e.background=new G(16777215);const t=new se(50,window.innerWidth/window.innerHeight,.1,1e3);t.position.z=25,t.position.x=-5;const s=new Oe({powerPreference:"high-performance",antialias:!0});s.setSize(window.innerWidth,window.innerHeight),document.getElementById("canvas").appendChild(s.domElement),s.toneMapping=Ve,s.toneMappingExposure=1,s.setPixelRatio(window.devicePixelRatio);const i=new he;var r=null;i.load("night.hdr",function(y){y.mapping=ue,r=y});const a=new he;var n=null;a.load("day.hdr",function(y){y.mapping=ue,n=y,e.environment=y,e.background=y});const o=new We({color:16777215,transmission:1,transparent:!0,roughness:.1,metalness:0,envMapIntensity:1}),h=new Ke().load("alluminio.jpg");h.wrapS=h.wrapT=Xe,h.repeat.set(8,8),h.rotation=-Math.PI/8;const f=new Z({color:12040107,roughness:.8,metalness:.1,map:h,roughnessMap:h,envMapIntensity:.5}),E=new Z({color:10066329,side:F,envMapIntensity:.3}),m=new Z({color:5592405,side:F,envMapIntensity:.3}),_=new je;var l={obj:null,center:null,left:null,right:null,handle:null};_.load("finestra_muro.glb",function(y){l.obj=y.scene,e.add(l.obj),l.obj.position.y-=6.4,l.obj.position.x-=.29,l.obj.scale.set(.006,.006,.006),l.obj.traverse(function(d){d.isMesh&&!d.name.includes("glass")&&(d.material=f),d.name.includes("glass")&&(d.material=o,d.visible=!1),d.isMesh&&d.name.includes("inner")&&(d.material=new ce({color:2236962})),d.name=="finestra"&&(l.center=d),d.name=="left"&&(l.left=d),d.name=="right"&&(l.right=d),d.name=="maniglia"&&(l.handle=d),d.name=="wall"&&(d.material=E),d.name=="floor"&&(d.material=m)}),l.center.rotation.set(J.x,J.y,J.z)}),window.onload=function(){var y=document.getElementById("controlDay"),d=document.getElementById("controlNight");y.onclick=function(){e.environment=n,e.background=n,b.position.set(7,9,-10)},d.onclick=function(){e.environment=r,e.background=r,b.position.set(100,9,-10)}};const A=new Ze(3,32,32),M=new ce({color:16764108}),b=new Se(A,M);b.position.set(7,9,-10),e.add(b);const v=new Ye(16768426,20);v.position.set(0,0,0),v.target.position.set(-5,-5,10),e.add(v),e.add(v.target);const g=new rt(s);g.addPass(new be(e,t));const S=new $t(t,b,{resolutionScale:1,density:.96,decay:.98,weight:.7,exposure:.1,samples:80}),U=new ss(t,S);g.addPass(U);const B=new qe;var we=1e3/60,O=0;function X(){Date.now()>=O&&(B.update(),window.scrollY<window.innerHeight*4&&(requestAnimationFrame(X),g.render()),O+=we,Date.now()>=O&&(O=Date.now())),requestAnimationFrame(X)}X();const x={};window.addEventListener("keydown",function(y){if(x[y.key]=!0,l.left&&l.right){if(x.a){const d=new z(l.left.rotation).to({y:l.left.rotation.y+1},500).start();B.add(d);const j=new z(l.right.rotation).to({y:l.right.rotation.y-1},500).start();B.add(j)}if(x.d){const d=new z(l.left.rotation).to({y:l.left.rotation.y-1},500).start();B.add(d);const j=new z(l.right.rotation).to({y:l.right.rotation.y+1},500).start();B.add(j)}}if(l.handle){if(x.w){const d=new z(l.handle.rotation).to({z:l.handle.rotation.z+Math.PI/2},500).start();B.add(d)}if(x.s){const d=new z(l.handle.rotation).to({z:l.handle.rotation.z-Math.PI/2},500).start();B.add(d)}}x.b&&(l.center.rotation.x+=.01),x.h&&(l.center.rotation.x-=.01),x.n&&(l.center.rotation.y+=.01),x.j&&(l.center.rotation.y-=.01),x.m&&(l.center.rotation.z+=.01),x.k&&(l.center.rotation.z-=.01),x.l&&console.log(l.center.rotation),x.o&&document.documentElement.classList.toggle("hidden"),x.g&&(e.background=new G(65280)),x.i&&(e.environment==n?(e.environment=r,e.background=r,b.position.set(100,9,-10)):(e.environment=n,e.background=n,b.position.set(7,9,-10)))}),window.addEventListener("keyup",function(y){x[y.key]=!1}),window.addEventListener("resize",function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),s.setSize(window.innerWidth,window.innerHeight)})}is();
